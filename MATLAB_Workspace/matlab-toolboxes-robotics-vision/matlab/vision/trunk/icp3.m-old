% $Header: /home/autom/pic/cvsroot/image-toolbox/icp3.m,v 1.1.1.1 2002/05/26 10:50:21 pic Exp $
% $Log: icp3.m,v $
% Revision 1.1.1.1  2002/05/26 10:50:21  pic
% initial import
%

set1 = load('points.dat');
%set1 = set1( set1(:,1) > 1, :);
set1 = set1(:,3:5);
N1 = numrows(set1);	% number of model points
set2 = load('holes.dat');
N2 = numrows(set2);


p1 = mean(set1);
p2 = mean(set2);
t = p2' - p1';
T = transl(t);
T = eye(4,4);
count = 0;
dnorm = 0;
while 1,
	% transform the observation
	set2t = (T * [set2'; ones(1,numrows(set2))])';
	set2t = set2t(:,1:3);
	%set(h, 'Xdata', set2t(:,1), 'Ydata', set2t(:,2), 'Zdata', set2t(:,3));

	% for each point in set1 find the nearest point in set2
	corresp = [];
	distance = [];
	for i=1:N2,
		d = set1 - ones(N1,1)*set2t(i,:);
		d = d';
		[dmin,k] = min( sum(d.^2) );
		distance(i) = sqrt(dmin);
		corresp(i) = k;
	end

	disp([distance; corresp])
	% check for big distances, and break the correspondances
	k = find(distance > 2*median(distance));

	% now remove them
	if ~isempty(k),
		fprintf('breaking corespondances '); disp(k);
		distance(k) = [];
		corresp(k) = [];
	end
	set2tmp = set2t;
	set2tmp(k,:) = [];
	fprintf('%d correspondences remaining\n', N2-length(k));

	% display the model points
	clf
	plot3(set1(:,1),set1(:,2),set1(:,3),'x');
	grid
	hold on
	plot3(set2t(:,1),set2t(:,2),set2t(:,3),'o');

	for i=1:numrows(set2tmp),
		ic = corresp(i);
		plot3( [set1(ic,1) set2tmp(i,1)], [set1(ic,2) set2tmp(i,2)], [set1(ic,3) set2tmp(i,3)], 'r');
	end


	% find the centroids of the two point sets
	% for the observations include only those points which have a
	% correspondance.
	p1 = mean(set1(corresp,:));
	p2 = mean(set2tmp);


	H = zeros(3,3);
	for i=1:numrows(set2tmp),
		H = H + (set1(corresp(i),:) - p1)' * (set2tmp(i,:) - p2);
	end
	H
	p1
	p2

	[u,s,v] = svd(H);
	R = v*u';
	if 0,
		aa = tr2rpy(R);
		a1 = aa(1);
		a2 = aa(2);
		a3 = aa(3);
		if a1 > 0.1,
			a1 = 0.1;
		elseif a1 < -0.1,
			a1 = -0.1;
		end
		if a2 > 0.1,
			a2 = 0.1;
		elseif a2 < -0.1,
			a2 = -0.1;
		end
		if a3 > 0.1,
			a3 = 0.1;
		elseif a3 < -0.1,
			a3 = -0.1;
		end
		R = tr2rot( rpy2tr(a1, a2, a3) );
	end

	if count < 2,
		R = eye(3,3);
	end

		
	p1-p2
	t = p2' - R*p1';
	
	disp([t' tr2rpy(R)])
	disp('----')

	% update the transform from observation to model, the inverse
	% of our original transformation
	%T = T * inv([R t; 0 0 0 1]);
	T = T * inv([R t; 0 0 0 1]);
	count = count + 1;
	[R t; 0 0 0 1]
	T
	norm(distance)
	pause

	if dnorm > 0,
		if abs(norm(distance) - dnorm)/dnorm < 0.01
			break;
		end
	end
	dnorm = norm(distance);
end
fprintf('%d iteration\n inv(T) =\n', count); disp(inv(T))
